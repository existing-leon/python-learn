线程的适用场景
1. CPU 密集型任务
场景描述：CPU 密集型任务是指那些需要大量 CPU 计算资源，几乎没有 I/O 等待时间的任务。多线程可以利用多核 CPU 的并行计算能力，
将任务分配到不同的核心上同时执行，从而显著提高程序的执行效率。

2. 多设备交互
场景描述：当程序需要同时与多个外部设备进行交互，并且这些交互操作可能会阻塞线程时，
多线程可以让程序在等待一个设备响应的同时，继续处理其他设备的请求，提高程序的整体效率。


协程的适用场景
1. 网络编程
场景描述：网络编程通常涉及大量的 I/O 操作，如发送和接收数据、等待服务器响应等。在这些操作中，程序大部分时间都在等待 I/O 完成，
使用协程可以在等待 I/O 的过程中切换到其他协程执行，从而提高程序的并发性能。

2. 文件读写
场景描述：文件读写也是 I/O 密集型操作，尤其是在处理大量小文件或者大文件的读写时，使用协程可以在等待文件 I/O 完成的过程中执行其他任务，提高程序的效率。