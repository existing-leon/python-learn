NumPy 位运算
位运算是一种在二进制数字的位级别上进行操作的一类运算，它们直接操作二进制数字的各个位，而不考虑数字的整体值。
NumPy 提供了一系列位运算函数，允许对数组中的元素进行逐位操作，这些操作与 Python 的位运算符类似，
但作用于 NumPy 数组，支持矢量化处理，性能更高。
位运算在计算机科学中广泛应用于优化和处理底层数据。
NumPy bitwise_ 开头的函数是位运算函数。
NumPy 位运算包括以下几个函数：
    操作	    函数/运算符	                描述
    按位与	numpy.bitwise_and(x1, x2)	对数组的每个元素执行逐位与操作。
    按位或	numpy.bitwise_or(x1, x2)	对数组的每个元素执行逐位或操作。
    按位异或	numpy.bitwise_xor(x1, x2)	对数组的每个元素执行逐位异或操作。
    按位取反	numpy.invert(x)	            对数组的每个元素执行逐位取反（按位非）。
    左移  	numpy.left_shift(x1, x2)	将数组的每个元素左移指定的位数。
    右移  	numpy.right_shift(x1, x2)	将数组的每个元素右移指定的位数。

bitwise_and
bitwise_and() 函数对数组中整数的二进制形式执行位与运算。

bitwise_or
bitwise_or()函数对数组中整数的二进制形式执行位或运算。

invert
invert() 函数对数组中整数进行位取反运算，即 0 变成 1，1 变成 0。
对于有符号整数，取该二进制数的补码，然后 +1。二进制数，最高位为0表示正数，最高位为 1 表示负数。
看看 ~1 的计算步骤：
    将1(这里叫：原码)转二进制 ＝ 00000001
    按位取反 ＝ 11111110
    发现符号位(即最高位)为1(表示负数)，将除符号位之外的其他数字取反 ＝ 10000001
    末位加1取其补码 ＝ 10000010
    转换回十进制 ＝ -2
表达式	二进制值（2 的补数）	                    十进制值
5	    00000000 00000000 00000000 00000101	    5
~5	    11111111 11111111 11111111 11111010	    -6

left_shift
left_shift() 函数将数组元素的二进制形式向左移动到指定位置，右侧附加相等数量的 0。

right_shift
right_shift() 函数将数组元素的二进制形式向右移动到指定位置，左侧附加相等数量的 0。