NumPy 排序、条件筛选函数
NumPy 提供了多种排序的方法。 这些排序函数实现不同的排序算法，每个排序算法的特征在于执行速度，最坏情况性能，
所需的工作空间和算法的稳定性。 下表显示了三种排序算法的比较。
种类	                    速度	    最坏情况	        工作空间	    稳定性
'quicksort'（快速排序）	1	    O(n^2)	        0	        否
'mergesort'（归并排序）	2	    O(n*log(n))	    ~n/2	    是
'heapsort'（堆排序）	    3	    O(n*log(n))	    0	    否

numpy.sort()
numpy.sort() 函数返回输入数组的排序副本。函数格式如下：
    * numpy.sort(a, axis, kind, order)
    参数说明：
        a: 要排序的数组
        axis: 沿着它排序数组的轴，如果没有数组会被展开，沿着最后的轴排序， axis=0 按列排序，axis=1 按行排序
        kind: 默认为'quicksort'（快速排序）
        order: 如果数组包含字段，则是要排序的字段

numpy.argsort()
numpy.argsort() 函数返回的是数组值从小到大的索引值。

numpy.lexsort()
numpy.lexsort() 用于对多个序列进行排序。把它想象成对电子表格进行排序，每一列代表一个序列，排序时优先照顾靠后的列。
这里举一个应用场景：小升初考试，重点班录取学生按照总成绩录取。在总成绩相同时，数学成绩高的优先录取，
在总成绩和数学成绩都相同时，按照英语成绩录取…… 这里，总成绩排在电子表格的最后一列，数学成绩在倒数第二列，
英语成绩在倒数第三列。

msort、sort_complex、partition、argpartition
    函数	            描述
    msort(a)	    数组按第一个轴排序，返回排序后的数组副本。np.msort(a) 相等于 np.sort(a, axis=0)。
    sort_complex(a)	对复数按照先实部后虚部的顺序进行排序。
    partition(a, kth[, axis, kind, order])	    指定一个数，对数组进行分区
    argpartition(a, kth[, axis, kind, order])	可以通过关键字 kind 指定算法沿着指定轴对数组进行分区

numpy.argmax() 和 numpy.argmin()
numpy.argmax() 和 numpy.argmin()函数分别沿给定轴返回最大和最小元素的索引。

numpy.nonzero()
numpy.nonzero() 函数返回输入数组中非零元素的索引。

numpy.where()
numpy.where() 函数返回输入数组中满足给定条件的元素的索引。

numpy.extract()
numpy.extract() 函数根据某个条件从数组中抽取元素，返回满条件的元素。