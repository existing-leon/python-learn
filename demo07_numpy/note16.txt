NumPy 统计函数
NumPy 提供了很多统计函数，用于从数组中查找最小元素，最大元素，百分位标准差和方差等。

numpy.amin() 和 numpy.amax()
numpy.amin() 用于计算数组中的元素沿指定轴的最小值。
    * numpy.amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)
    参数说明：
        a: 输入的数组，可以是一个NumPy数组或类似数组的对象。
        axis: 可选参数，用于指定在哪个轴上计算最小值。如果不提供此参数，则返回整个数组的最小值。
              可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。
        out: 可选参数，用于指定结果的存储位置。
        keepdims: 可选参数，如果为True，将保持结果数组的维度数目与输入数组相同。如果为False（默认值），
                  则会去除计算后维度为1的轴。
        initial: 可选参数，用于指定一个初始值，然后在数组的元素上计算最小值。
        where: 可选参数，一个布尔数组，用于指定仅考虑满足条件的元素。

numpy.amax() 用于计算数组中的元素沿指定轴的最大值。
    * numpy.amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)
    参数说明：
        a: 输入的数组，可以是一个NumPy数组或类似数组的对象。
        axis: 可选参数，用于指定在哪个轴上计算最大值。如果不提供此参数，则返回整个数组的最大值。
              可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。
        out: 可选参数，用于指定结果的存储位置。
        keepdims: 可选参数，如果为True，将保持结果数组的维度数目与输入数组相同。如果为False（默认值），
                  则会去除计算后维度为1的轴。
        initial: 可选参数，用于指定一个初始值，然后在数组的元素上计算最大值。
        where: 可选参数，一个布尔数组，用于指定仅考虑满足条件的元素。

numpy.ptp()
numpy.ptp() 函数计算数组中元素最大值与最小值的差（最大值 - 最小值）。
    * numpy.ptp(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)
    参数说明：
        a: 输入的数组，可以是一个 NumPy 数组或类似数组的对象。
        axis: 可选参数，用于指定在哪个轴上计算峰-峰值。如果不提供此参数，则返回整个数组的峰-峰值。可以是一个整数表示轴的索引，
              也可以是一个元组表示多个轴。
        out: 可选参数，用于指定结果的存储位置。
        keepdims: 可选参数，如果为 True，将保持结果数组的维度数目与输入数组相同。如果为 False（默认值），则会去除计算后维度为1的轴。
        initial: 可选参数，用于指定一个初始值，然后在数组的元素上计算峰-峰值。
        where: 可选参数，一个布尔数组，用于指定仅考虑满足条件的元素。

numpy.percentile()
百分位数是统计中使用的度量，表示小于这个值的观察值的百分比。 函数numpy.percentile()接受以下参数。
    * numpy.percentile(a, q, axis)
    参数说明：
        a: 输入数组
        q: 要计算的百分位数，在 0 ~ 100 之间
        axis: 沿着它计算百分位数的轴
首先明确百分位数：
第 p 个百分位数是这样一个值，它使得至少有 p% 的数据项小于或等于这个值，且至少有 (100-p)% 的数据项大于或等于这个值。
举个例子：高等院校的入学考试成绩经常以百分位数的形式报告。比如，假设某个考生在入学考试中的语文部分的原始分数为 54 分。
相对于参加同一考试的其他学生来说，他的成绩如何并不容易知道。但是如果原始分数54分恰好对应的是第70百分位数，我们就能知
道大约70%的学生的考分比他低，而约30%的学生考分比他高。
这里的 p = 70。

numpy.median()
numpy.median() 函数用于计算数组 a 中元素的中位数（中值）
    * numpy.median(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>)
    参数说明：
        a: 输入的数组，可以是一个 NumPy 数组或类似数组的对象。
        axis: 可选参数，用于指定在哪个轴上计算中位数。如果不提供此参数，则计算整个数组的中位数。可以是一个整数表示
              轴的索引，也可以是一个元组表示多个轴。
        out: 可选参数，用于指定结果的存储位置。
        overwrite_input: 可选参数，如果为True，则允许在计算中使用输入数组的内存。这可能会在某些情况下提高性能，
              但可能会修改输入数组的内容。
        keepdims: 可选参数，如果为True，将保持结果数组的维度数目与输入数组相同。如果为False（默认值），则会去除
              计算后维度为1的轴。

numpy.mean()
numpy.mean() 函数返回数组中元素的算术平均值，如果提供了轴，则沿其计算。
算术平均值是沿轴的元素的总和除以元素的数量。
    * numpy.mean(a, axis=None, dtype=None, out=None, keepdims=<no value>)
    参数说明：
        a: 输入的数组，可以是一个 NumPy 数组或类似数组的对象。
        axis: 可选参数，用于指定在哪个轴上计算平均值。如果不提供此参数，则计算整个数组的平均值。
              可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。
        dtype: 可选参数，用于指定输出的数据类型。如果不提供，则根据输入数据的类型选择合适的数据类型。
        out: 可选参数，用于指定结果的存储位置。
        keepdims: 可选参数，如果为True，将保持结果数组的维度数目与输入数组相同。如果为False（默认值），
              则会去除计算后维度为1的轴。

numpy.average()
numpy.average() 函数根据在另一个数组中给出的各自的权重计算数组中元素的加权平均值。
该函数可以接受一个轴参数。 如果没有指定轴，则数组会被展开。
加权平均值即将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。
考虑数组[1,2,3,4]和相应的权重[4,3,2,1]，通过将相应元素的乘积相加，并将和除以权重的和，来计算加权平均值。
    加权平均值 = (1*4+2*3+3*2+4*1)/(4+3+2+1)
函数语法：
    * numpy.average(a, axis=None, weights=None, returned=False)
    参数说明：
        a: 输入的数组，可以是一个 NumPy 数组或类似数组的对象。
        axis: 可选参数，用于指定在哪个轴上计算加权平均值。如果不提供此参数，则计算整个数组的加权平均值。
              可以是一个整数表示轴的索引，也可以是一个元组表示多个轴。
        weights: 可选参数，用于指定对应数据点的权重。如果不提供权重数组，则默认为等权重。
        returned: 可选参数，如果为True，将同时返回加权平均值和权重总和。

标准差
标准差是一组数据平均值分散程度的一种度量。
标准差是方差的算术平方根。
标准差公式如下：
    * std = sqrt(mean((x - x.mean())**2))
如果数组是 [1，2，3，4]，则其平均值为 2.5。 因此，差的平方是 [2.25,0.25,0.25,2.25]，并且再求其平均值的平方根
除以 4，即 sqrt(5/4) ，结果为 1.1180339887498949。

方差
统计中的方差（样本方差）是每个样本值与全体样本值的平均数之差的平方值的平均数，即 mean((x - x.mean())** 2)。
换句话说，标准差是方差的平方根。